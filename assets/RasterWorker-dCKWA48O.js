import{X as f,cV as u,$ as p,a1 as l,au as S}from"./index-CsYxis92.js";import{c as y}from"./GeographicTransformation-80wk34Q5.js";import{c as i,f as d,I as x,R as h,T as O,D as N,j as J,u as B,s as P}from"./dataUtils-CHmjCkct.js";import{h as g,j as k,_ as v,p as b}from"./RasterSymbolizer-D3boHqgR.js";import{T as w}from"./rasterFunctionHelper-Cnqs9S7X.js";import{v as z,s as T}from"./rasterProjectionHelper-BB0ki5qJ.js";import{t as D,m as $,n as I}from"./PolynomialTransform-kStP0hQN.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./clipUtils-Bh5mqAic.js";var c;let m=c=class extends D{constructor(){super(...arguments),this.type="identity"}clone(){return new c}};f([u({IdentityXform:"identity"})],m.prototype,"type",void 0),m=c=f([p("esri.layers.support.rasterTransforms.IdentityTransform")],m);const j={GCSShiftXform:I,IdentityXform:m,PolynomialXform:$};function F(n){if(!(n==null?void 0:n.type))return null;const e=j[n==null?void 0:n.type];if(e){const s=new e;return s.read(n),s}return null}class U{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),s=d(e,t.type);return Promise.resolve(s!=null?s.toJSON():null)}computeStatisticsHistograms(t){const e=i.fromJSON(t.pixelBlock),s=g(e);return Promise.resolve(s)}async decode(t){const e=await k(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?l.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){var e;this.symbolizer=v.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=w(t.rasterFunctionJSON)}async process(t){var s;const e=this.rasterFunction.process({extent:l.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map((o=>o!=null?i.fromJSON(o):null)),primaryPixelSizes:(s=t.primaryPixelSizes)==null?void 0:s.map((o=>o!=null?S.fromJSON(o):null)),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e==null?void 0:e.toJSON())}estimateStatisticsHistograms(t){const e=b(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=x(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach(((s,o)=>{e.set(o,s==null?void 0:s.toJSON())})),Promise.resolve(e)}clipTile(t){const e=i.fromJSON(t.pixelBlock),s=h({...t,pixelBlock:e});return Promise.resolve(s==null?void 0:s.toJSON())}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map((a=>a?new i(a):null)),s=O(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let o,r=s;return t.coefs&&(r=N(s,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(o=J(t.destDimension,t.gcsGrid),r=B(r,t.isUV?"vector-uv":"vector-magdir",o)),{pixelBlock:r==null?void 0:r.toJSON(),localNorthDirections:o}}async createFlowMesh(t,e){const s={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:o,indexData:r}=await P(t.meshType,t.simulationSettings,s,e.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:r.buffer},transferList:[o.buffer,r.buffer]}}async getProjectionOffsetGrid(t){var a;const e=l.fromJSON(t.projectedExtent),s=l.fromJSON(t.srcBufferExtent);let o=null;(a=t.datumTransformationSteps)!=null&&a.length&&(o=new y({steps:t.datumTransformationSteps})),await z();const r=t.rasterTransform?F(t.rasterTransform):null;return T({...t,projectedExtent:e,srcBufferExtent:s,datumTransformation:o,rasterTransform:r})}}export{U as default};
//# sourceMappingURL=RasterWorker-dCKWA48O.js.map
