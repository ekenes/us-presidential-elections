import{gT as c,bI as x}from"./index-C9i_GUWP.js";import{f as g,l as y}from"./operatorBuffer-CZbubZgl.js";import{getSpatialReference as f,fromGeometry as G,toGeometry as u,fromGeometries as I}from"./jsonConverter-Ci2MuO3f.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./Point2D-BRB9V_5r.js";import"./ProjectionTransformation-BkuLwbmX.js";import"./Envelope2D-DJjAtNGr.js";import"./Transformation2D-CqNH2kL4.js";import"./OperatorDefinitions-DP7_WWTp.js";import"./GeometryCleaner-BEJM7I4l-DQJCPvln.js";import"./OperatorSimplifyOGC-A3YJNc0F.js";import"./OperatorGeneralize-DDHjsUnk.js";function P(o,e,a={}){const{unit:t}=a,m=f(o);t&&m&&(e=c(e,t,m));const i=G(o),r=i.getSpatialReference();return u(g(i.getGeometry(),r,e),r)}function T(o,e,a={}){let{maxDeviation:t=NaN,maxVerticesInFullCircle:m=96,union:i=!1,unit:r}=a;const n=f(o);r&&n&&(e=e.map((p=>c(p,r,n))),t&&(t=c(t,r,n)));const[l,s]=I(o);return y(l,s,e,t,m,i).map((p=>u(p,s))).filter(x)}export{P as execute,T as executeMany};
//# sourceMappingURL=bufferOperator-Bpx9Vj9b.js.map
