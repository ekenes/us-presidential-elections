import{aA as p,r as m,cd as s}from"./index-C9i_GUWP.js";import{p as n}from"./MeshVertexAttributes-Bnx1Ky67.js";import{B as a}from"./vertexSpaceConversion-opMmh0QH.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-BnX7R4aw.js";import"./computeTranslationToOriginAndRotation-dRsko0L_.js";import"./projectPointToVector-4dKyI6nI.js";import"./meshVertexSpaceUtils-CAHo-BWA.js";import"./MeshLocalVertexSpace-ohJEdlCw.js";import"./vec3-DD6IeaPu.js";import"./BufferView-CsHrDAIJ.js";import"./vec4-DmJrsGKI.js";async function E(r,o,t){await Promise.resolve(),p(t);const e=a(r,o,{useEllipsoid:t==null?void 0:t.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=r.cloneAndModifyVertexAttributes(new n({...e,uv:s(r.vertexAttributes.uv),color:s(r.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
//# sourceMappingURL=convertMeshVertexSpace-L_rGzVCW.js.map
