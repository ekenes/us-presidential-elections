import{M as s,N as l,O as $,bE as P,fU as E,cD as T,eB as F,cH as N,cT as D,cF as M,cG as R,cI as _,cE as J,cV as U,cU as j,aI as V,d1 as S,d9 as f,dA as q,U as b,aY as A,dT as H,ds as k,fH as C,s as x,aR as G,eG as I,aO as z,dc as B,cM as Z,cS as K,f2 as W}from"./index-GOO0DjDp.js";import{d as Y,i as Q}from"./scaleUtils-C60Bpzlq.js";import{n as X,m as ee,f as te,e as L,t as re}from"./SublayersOwner-BMIKx8eS.js";import{t as se}from"./imageBitmapUtils-n9ANjY_q.js";import"./CollectionFlattener-DHMge4Xy.js";import"./QueryTask-CT2eqm7b.js";import"./infoFor3D-CxdEiWhp.js";import"./executeForIds-DRS4q9Ca.js";import"./featureConversionUtils-DVuAsAiD.js";function O(e,t){var a;return"floorInfo"in t&&((a=t.floorInfo)!=null&&a.floorField)?ae(e,t.floorInfo.floorField):null}function ae(e,t){if(!(e!=null&&e.length))return null;const a=e.filter(r=>r!=="").map(r=>`'${r}'`);return a.push("''"),`${t} IN (${a.join(",")}) OR ${t} IS NULL`}const ie={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let m=class extends P{constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map(t=>{const a=O(this.floors,t);return t.toExportImageJSON(a)});return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&X(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.removeHandles("layer"),e&&this.addHandles([e.allSublayers.on("change",()=>this.notifyChange("visibleSublayers")),e.on("sublayer-update",t=>this.notifyChange(ie[t.propertyName]))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map(t=>t.id).join(","):"show:-1":null}get layerDefs(){var a;const e=!!((a=this.floors)!=null&&a.length),t=this.visibleSublayers.filter(r=>r.definitionExpression!=null||e&&r.floorInfo!=null);return t.length?JSON.stringify(t.reduce((r,o)=>{const i=O(this.floors,o),y=E(i,o.definitionExpression);return y!=null&&(r[o.id]=y),r},{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const t=this.layer.sublayers,a=this.scale,r=i=>{i.visible&&(a===0||Y(a,i.minScale,i.maxScale))&&(i.sublayers?i.sublayers.forEach(r):e.unshift(i))};t&&t.forEach(r);const o=this._get("visibleSublayers");return!o||o.length!==e.length||o.some((i,y)=>e[y]!==i)?e:o}toJSON(){const e=this.layer;let t={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?t.dynamicLayers=this.dynamicLayers:t={...t,layers:this.layers,layerDefs:this.layerDefs},t}};s([l({readOnly:!0})],m.prototype,"dynamicLayers",null),s([l()],m.prototype,"floors",void 0),s([l({readOnly:!0})],m.prototype,"hasDynamicLayers",null),s([l()],m.prototype,"layer",null),s([l({readOnly:!0})],m.prototype,"layers",null),s([l({readOnly:!0})],m.prototype,"layerDefs",null),s([l({type:Number})],m.prototype,"scale",void 0),s([l({readOnly:!0})],m.prototype,"version",null),s([l({readOnly:!0})],m.prototype,"visibleSublayers",null),m=s([$("esri.layers.support.ExportImageParameters")],m);let n=class extends T(F(N(ee(te(D(M(R(_(J(U(j(K)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new m({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(V).then(()=>this._fetchService(t))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const a=t.supportedImageFormatTypes;return a&&a.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,a,r){var h,g,v;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:p})=>p&&p.toArray().reverse()).toArray();let i=!1;const y=S(r.origin);if((h=this.capabilities)!=null&&h.operations.supportsExportMap&&((v=(g=this.capabilities)==null?void 0:g.exportMap)!=null&&v.supportsDynamicLayers)){if(y===f.PORTAL_ITEM){const p=this.createSublayersForOrigin("service").sublayers;i=L(o,p,f.SERVICE)}else if(y>f.PORTAL_ITEM){const p=this.createSublayersForOrigin("portal-item");i=L(o,p.sublayers,S(p.origin))}}const u=[],d={writeSublayerStructure:i,...r};let c=i||this.hasVisibleLayersForOrigin(y);o.forEach(p=>{const w=p.write({},d);u.push(w),c=c||p.originOf("visible")==="user"}),u.some(p=>Object.keys(p).length>1)&&(t.layers=u),c&&(t.visibleLayers=o.filter(p=>p.visible).map(p=>p.id))}createExportImageParameters(e,t,a,r){const o=(r==null?void 0:r.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(r==null?void 0:r.floors)??null,this._exportImageParameters.scale=Q({extent:e,width:t})*o;const i=this._exportImageParameters.toJSON(),y=!(r!=null&&r.rotation)||this.version<10.3?{}:{rotation:-r.rotation},u=e==null?void 0:e.spatialReference,d=q(u);i.dpi*=o;const c={};if(r!=null&&r.timeExtent){const{start:h,end:g}=r.timeExtent.toJSON();c.time=h&&g&&h===g?""+h:`${h??"null"},${g??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:d,imageSR:d,size:t+","+a,...i,...y,...c}}async fetchImage(e,t,a,r){const{data:o}=await this._fetchImage("image",e,t,a,r);return o}async fetchImageBitmap(e,t,a,r){const{data:o,url:i}=await this._fetchImage("blob",e,t,a,r);return se(o,i,r==null?void 0:r.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:a}=await b(this.url,t),{extent:r,fullExtent:o,timeExtent:i}=a,y=r||o;return{fullExtent:y&&A.fromJSON(y),timeExtent:i&&H.fromJSON({start:i[0],end:i[1]})}}loadAll(){return k(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return C(this,e)}async _fetchImage(e,t,a,r,o){var u,d,c;const i={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,a,r,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},y=this.parsedUrl.path+"/export";if(((u=i.query)==null?void 0:u.dynamicLayers)!=null&&!((c=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&c.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:i.query});try{const{data:h}=await b(y,i);return{data:h,url:y}}catch(h){throw G(h)?h:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${y}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:a}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});a&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var t;return!(e==null||!((t=this.sublayersSourceJSON[e])!=null&&t.visibleLayers))}};s([l(I("dateFieldsTimeReference"))],n.prototype,"dateFieldsTimeZone",void 0),s([l({type:Boolean})],n.prototype,"datesInUnknownTimezone",void 0),s([l()],n.prototype,"dpi",void 0),s([l()],n.prototype,"gdbVersion",void 0),s([l()],n.prototype,"imageFormat",void 0),s([z("imageFormat",["supportedImageFormatTypes"])],n.prototype,"readImageFormat",null),s([l({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],n.prototype,"imageMaxHeight",void 0),s([l({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],n.prototype,"imageMaxWidth",void 0),s([l()],n.prototype,"imageTransparency",void 0),s([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],n.prototype,"isReference",void 0),s([l({json:{read:!1,write:!1}})],n.prototype,"labelsVisible",void 0),s([l({type:["ArcGISMapServiceLayer"]})],n.prototype,"operationalLayerType",void 0),s([l({json:{read:!1,write:!1}})],n.prototype,"popupEnabled",void 0),s([l(I("preferredTimeReference"))],n.prototype,"preferredTimeZone",void 0),s([l()],n.prototype,"sourceJSON",void 0),s([l({json:{write:{ignoreOrigin:!0}}})],n.prototype,"sublayers",void 0),s([B("sublayers",{layers:{type:[re]},visibleLayers:{type:[W]}})],n.prototype,"writeSublayers",null),s([l({type:["show","hide","hide-children"]})],n.prototype,"listMode",void 0),s([l({json:{read:!1},readOnly:!0,value:"map-image"})],n.prototype,"type",void 0),s([l(Z)],n.prototype,"url",void 0),n=s([$("esri.layers.MapImageLayer")],n);const de=n;export{de as default};
